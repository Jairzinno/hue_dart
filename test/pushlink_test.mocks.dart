// Mocks generated by Mockito 5.0.7 from annotations
// in hue_dart/test/pushlink_test.dart.
// Do not manually edit this file.

import 'dart:async' as i4;

import 'package:hue_dart/src/configuration/pushlink_storage.dart' as i3;
import 'package:hue_dart/src/core/bridge_discovery.dart' as i5;
import 'package:hue_dart/src/core/discovery_result.dart' as i2;
import 'package:mockito/mockito.dart' as i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeDiscoveryResult extends i1.Fake implements i2.DiscoveryResult {}

/// A class which mocks [PushlinkStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockPushlinkStorage extends i1.Mock implements i3.PushlinkStorage {
  MockPushlinkStorage() {
    i1.throwOnMissingStub(this);
  }

  @override
  i4.Future<bool> usernameExists() =>
      (super.noSuchMethod(Invocation.method(#usernameExists, []),
          returnValue: Future<bool>.value(false),) as i4.Future<bool>);
  @override
  i4.Future<bool> saveUsername(String? username) =>
      (super.noSuchMethod(Invocation.method(#saveUsername, [username]),
          returnValue: Future<bool>.value(false),) as i4.Future<bool>);
}

/// A class which mocks [BridgeDiscovery].
///
/// See the documentation for Mockito's code generation for more information.
class MockBridgeDiscovery extends i1.Mock implements i5.BridgeDiscovery {
  MockBridgeDiscovery() {
    i1.throwOnMissingStub(this);
  }

  @override
  i4.Future<List<i2.DiscoveryResult>> automatic() => (super.noSuchMethod(
          Invocation.method(#automatic, []),
          returnValue:
              Future<List<i2.DiscoveryResult>>.value(<i2.DiscoveryResult>[]),)
      as i4.Future<List<i2.DiscoveryResult>>);
  @override
  i4.Future<i2.DiscoveryResult> manual(String? ipAddress) =>
      (super.noSuchMethod(Invocation.method(#manual, [ipAddress]),
              returnValue:
                  Future<i2.DiscoveryResult>.value(_FakeDiscoveryResult()),)
          as i4.Future<i2.DiscoveryResult>);
}
